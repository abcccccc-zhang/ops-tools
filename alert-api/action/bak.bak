package action

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os/exec"

	"alter-api/models"
)

// ExecuteAction performs the action based on its type
func ExecuteAction(action models.Action, conditions models.Condition) error {
	// log.Printf("Executing action: %v", action)
	// log.Printf("conditions %v", conditions)
	switch action.Type {
	case "command":
		// Run command (e.g., docker restart)

		cmd := exec.Command("sh", "-c", action.Command)
		log.Printf("Running command: %s", action.Command)
		return cmd.Run()
	case "webhook":
		// Send a webhook request
		client := &http.Client{}
		data, err := json.Marshal(action.Body)
		if err != nil {
			log.Printf("Error marshalling webhook body: %v", err)
			return err
		}
		req, err := http.NewRequest(action.Method, action.URL, bytes.NewBuffer(data))
		if err != nil {
			log.Printf("Error creating webhook request: %v", err)
			return err
		}
		for key, value := range action.Headers {
			req.Header.Set(key, value)
		}
		log.Printf("Sending webhook request to %s with method %s", action.URL, action.Method)
		resp, err := client.Do(req)
		if err != nil {
			log.Printf("Error sending webhook request: %v", err)
			return err
		}
		defer resp.Body.Close()
		// log.Printf("Webhook response status: %s", resp.Status)
		return nil
	default:
		log.Printf("Unknown action type: %s", action.Type)
		return fmt.Errorf("unknown action type: %s", action.Type)
	}
}
